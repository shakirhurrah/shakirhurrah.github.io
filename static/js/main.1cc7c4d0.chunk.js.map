{"version":3,"sources":["assets/star.png","App.js","reportWebVitals.js","index.js"],"names":["CameraControls","useThree","camera","domElement","gl","controlsRef","useRef","useFrame","current","update","ref","args","autoRotate","autoRotateSpeed","Points","imgTex","useLoader","THREE","circleImg","bufferRef","t","graph","useCallback","x","z","Math","tan","count","positions","useMemo","xi","zi","y","push","Float32Array","array","i","needsUpdate","attach","attachObject","length","itemSize","map","color","size","sizeAttenuation","transparent","alphaTest","opacity","AnimationCanvas","colorManagement","position","fov","fallback","extend","OrbitControls","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAe,MAA0B,iC,OCQzC,SAASA,IACP,MAGIC,cAFFC,EADF,EACEA,OACKC,EAFP,EAEEC,GAAKD,WAGDE,EAAcC,mBAGpB,OAFAC,aAAS,kBAAMF,EAAYG,QAAQC,YAGjC,+BACEC,IAAKL,EACLM,KAAM,CAACT,EAAQC,GACfS,YAAU,EACVC,iBAAkB,KAKxB,SAASC,IACP,IAAMC,EAASC,YAAUC,gBAAqBC,GACxCC,EAAYb,mBAEdc,EAAI,EAGFC,EAAQC,uBAAY,SAACC,EAAGC,GAE5B,OADUC,KAAKC,IAHT,MAGmB,SAAAH,EAAK,GAAL,SAASC,EAAK,GAAIJ,GAFrC,KAIL,CAACA,EALI,KACA,IAMFO,EAAQ,IAEVC,EAAYC,mBAAQ,WAGtB,IAFA,IAAID,EAAY,GAEPE,EAAK,EAAGA,EAAKH,EAAOG,IAC3B,IAAK,IAAIC,EAAK,EAAGA,EAAKJ,EAAOI,IAAM,CACjC,IAAIR,EANE,GAMSO,EAAKH,IAChBH,EAPE,GAOSO,EAAKJ,IAChBK,EAAIX,EAAME,EAAGC,GACjBI,EAAUK,KAAKV,EAAGS,EAAGR,GAIzB,OAAO,IAAIU,aAAaN,KACvB,CAACD,EAdQ,EAcIN,IAqBhB,OAnBAd,aAAS,WACPa,GAAK,GAKL,IAHA,IAAMQ,EAAYT,EAAUX,QAAQ2B,MAEhCC,EAAI,EACCN,EAAK,EAAGA,EAAKH,EAAOG,IAC3B,IAAK,IAAIC,EAAK,EAAGA,EAAKJ,EAAOI,IAAM,CACjC,IAAIR,EAxBE,GAwBSO,EAAKH,IAChBH,EAzBE,GAyBSO,EAAKJ,IAEpBC,EAAUQ,EAAI,GAAKf,EAAME,EAAGC,GAC5BY,GAAK,EAITjB,EAAUX,QAAQ6B,aAAc,KAIhC,mCACE,gCAAgBC,OAAO,WAAvB,SACE,iCACE5B,IAAKS,EACLoB,aAAc,CAAC,aAAc,YAC7BJ,MAAOP,EACPD,MAAOC,EAAUY,OAAS,EAC1BC,SAAU,MAId,gCACEH,OAAO,WACPI,IAAK3B,EACL4B,MAAO,MACPC,KAAM,IACNC,iBAAe,EACfC,aAAa,EACbC,UAAW,GACXC,QAAS,OAMjB,SAASC,IACP,OACE,eAAC,IAAD,CACEC,iBAAiB,EACjBhD,OAAQ,CAAEiD,SAAU,CAAC,IAAK,GAAI,GAAIC,IAAK,IAFzC,UAIE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAACvC,EAAD,MAEF,cAACd,EAAD,OAxGNsD,YAAO,CAACC,oBAwHOC,MAVf,WACE,OACE,qBAAKC,UAAU,OAAf,SACE,cAAC,WAAD,CAAUJ,SAAU,6CAApB,SACE,cAACJ,EAAD,SC5GOS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1cc7c4d0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/star.8cd3c5f1.png\";","import './App.css';\nimport * as THREE from 'three';\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useFrame, useLoader, useThree } from 'react-three-fiber';\nimport circleImg from './assets/star.png';\nimport { Suspense, useCallback, useMemo, useRef } from 'react';\nextend({OrbitControls})\n\nfunction CameraControls(){\n  const {\n    camera,\n    gl: {domElement}\n  } = useThree();\n\n  const controlsRef = useRef();\n  useFrame(() => controlsRef.current.update())\n\n  return (\n    <orbitControls\n      ref={controlsRef}\n      args={[camera, domElement]}\n      autoRotate\n      autoRotateSpeed={-0.2}\n    />\n  );\n}\n\nfunction Points() {\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const bufferRef = useRef();\n\n  let t = 0;\n  let f = 0.002;\n  let a = 3;\n  const graph = useCallback((x, z) => {\n    let w =   Math.tan((f * (x ** 2 + z ** 2 + t)) * a);\n    return w;\n  }, [t, f, a])\n\n  const count = 100\n  const sep = 3\n  let positions = useMemo(() => {\n    let positions = []\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n        let y = graph(x, z);\n        positions.push(x, y, z);\n      }\n    }\n\n    return new Float32Array(positions);\n  }, [count, sep, graph])\n\n  useFrame(() => {\n    t += 15\n    \n    const positions = bufferRef.current.array;\n\n    let i = 0;\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n\n        positions[i + 1] = graph(x, z);\n        i += 3;\n      }\n    }\n\n    bufferRef.current.needsUpdate = true;\n  })\n\n  return (\n    <points>\n      <bufferGeometry attach=\"geometry\">\n        <bufferAttribute\n          ref={bufferRef}\n          attachObject={['attributes', 'position']}\n          array={positions}\n          count={positions.length / 3}\n          itemSize={3}\n        />\n      </bufferGeometry>\n\n      <pointsMaterial\n        attach=\"material\"\n        map={imgTex}\n        color={0x00AAFF}\n        size={1.2}\n        sizeAttenuation\n        transparent={false}\n        alphaTest={0.5}\n        opacity={1.0}\n      />\n    </points>\n  );\n}\n\nfunction AnimationCanvas() {\n  return (\n    <Canvas\n      colorManagement={false}\n      camera={{ position: [100, 10, 0], fov: 75 }}\n    >\n      <Suspense fallback={null}>\n        <Points />\n      </Suspense>\n      <CameraControls/>\n    </Canvas>\n  );\n}\n\n\nfunction App() {\n  return (\n    <div className=\"anim\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <AnimationCanvas />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}